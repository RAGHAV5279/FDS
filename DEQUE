/*A double-ended queue (deque) is a linear list in which additions and deletions may be 
made at either end. Obtain a data representation mapping a deque into a one-
dimensional array. Write C++ program to simulate deque with functions to add and 
delete elements from either end of the deque.*/

#include <iostream>
using namespace std;

class Deque {
private:
    int front;   // Index for the front of the deque
    int rear;    // Index for the rear of the deque
    int size;    // Maximum size of the deque
    int* deque;  // Pointer to the array representing the deque

public:
    // Constructor to initialize the deque
    Deque(int maxSize) {
        size = maxSize;
        deque = new int[size]; // Dynamically allocate memory for the array
        front = -1;
        rear = -1;
    }

    // Function to check if the deque is full
    bool isFull() {
        return (front == 0 && rear == size - 1) || (front == rear + 1);
    }

    // Function to check if the deque is empty
    bool isEmpty() {
        return front == -1;
    }

    // Function to add an element to the front
    void addFront(int value) {
        if (isFull()) {
            cout << "Deque is full. Cannot add to the front.\n";
            return;
        }

        // If deque is initially empty
        if (isEmpty()) {
            front = 0;
            rear = 0;
        } else if (front == 0) {
            front = size - 1; // Wrap around to the end
        } else {
            front--; // Move front one step backward
        }

        deque[front] = value;
        cout << value << " added to the front.\n";
    }

    // Function to add an element to the rear
    void addRear(int value) {
        if (isFull()) {
            cout << "Deque is full. Cannot add to the rear.\n";
            return;
        }

        // If deque is initially empty
        if (isEmpty()) {
            front = 0;
            rear = 0;
        } else if (rear == size - 1) {
            rear = 0; // Wrap around to the front
        } else {
            rear++; // Move rear one step forward
        }

        deque[rear] = value;
        cout << value << " added to the rear.\n";
    }

    // Function to delete an element from the front
    void deleteFront() {
        if (isEmpty()) {
            cout << "Deque is empty. Cannot delete from the front.\n";
            return;
        }

        cout << deque[front] << " removed from the front.\n";

        // If there's only one element
        if (front == rear) {
            front = -1;
            rear = -1;
        } else if (front == size - 1) {
            front = 0; // Wrap around to the front
        } else {
            front++; // Move front one step forward
        }
    }

    // Function to delete an element from the rear
    void deleteRear() {
        if (isEmpty()) {
            cout << "Deque is empty. Cannot delete from the rear.\n";
            return;
        }

        cout << deque[rear] << " removed from the rear.\n";

        // If there's only one element
        if (front == rear) {
            front = -1;
            rear = -1;
        } else if (rear == 0) {
            rear = size - 1; // Wrap around to the end
        } else {
            rear--; // Move rear one step backward
        }
    }

    // Function to display the deque
    void display() {
        if (isEmpty()) {
            cout << "Deque is empty.\n";
            return;
        }

        cout << "Deque elements: ";
        if (front <= rear) {
            for (int i = front; i <= rear; i++) {
                cout << deque[i] << " ";
            }
        } else {
            for (int i = front; i < size; i++) {
                cout << deque[i] << " ";
            }
            for (int i = 0; i <= rear; i++) {
                cout << deque[i] << " ";
            }
        }
        cout << endl;
    }

    // Destructor to free memory
    ~Deque() {
        delete[] deque;
    }
};

// Main function to simulate deque operations
int main() {
    int size;
    cout << "Enter the size of the deque: ";
    cin >> size;

    Deque dq(size);

    int choice, value;
    while (true) {
        cout << "\n--- Deque Operations Menu ---\n";
        cout << "1. Add to Front\n";
        cout << "2. Add to Rear\n";
        cout << "3. Delete from Front\n";
        cout << "4. Delete from Rear\n";
        cout << "5. Display Deque\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter value to add to the front: ";
            cin >> value;
            dq.addFront(value);
            break;

        case 2:
            cout << "Enter value to add to the rear: ";
            cin >> value;
            dq.addRear(value);
            break;

        case 3:
            dq.deleteFront();
            break;

        case 4:
            dq.deleteRear();
            break;

        case 5:
            dq.display();
            break;

        case 6:
            cout << "Exiting program.\n";
            return 0;

        default:
            cout << "Invalid choice! Please try again.\n";
        }
    }

    return 0;
}
