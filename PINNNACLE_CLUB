/*Department of Computer Engineering has student's club named 'Pinnacle Club'. Students 
of second, third and final year of department can be granted membership on request. 
Similarly one may cancel the membership of club. First node is reserved for president of 
club and last node is reserved for secretary of club. Write C++ program to maintain club 
member‘s information using singly linked list. Store student PRN and Name. Write 
functions to:
a) Add and delete the members as well as president or even secretary.
b) Compute total number of members of club
c) Display members
d) Two linked lists exists for two divisions. Concatenate two lists.*/

#include <iostream>
#include <string>
using namespace std;

// Node structure for each member
struct Node {
    int prn;            // Student PRN
    string name;        // Student name
    Node* next;         // Pointer to the next node

    // Constructor to initialize a node
    Node(int p, string n) : prn(p), name(n), next(nullptr) {}
};

// Linked list class for the club
class PinnacleClub {
private:
    Node* head; // Pointer to the president (first node)
    Node* tail; // Pointer to the secretary (last node)

public:
    PinnacleClub() : head(nullptr), tail(nullptr) {} // Constructor to initialize an empty list

    // Add a new member
    void addMember(int prn, string name, bool isPresident = false, bool isSecretary = false) {
        Node* newMember = new Node(prn, name);

        // Add as president
        if (isPresident) {
            newMember->next = head;
            head = newMember;
            if (tail == nullptr) // If list was empty, set tail to head
                tail = head;
        }
        // Add as secretary
        else if (isSecretary) {
            if (tail == nullptr) { // If the list is empty
                head = tail = newMember;
            } else {
                tail->next = newMember;
                tail = newMember;
            }
        }
        // Add as a regular member
        else {
            if (head == nullptr) { // If the list is empty
                head = tail = newMember;
            } else {
                newMember->next = head->next;
                head->next = newMember;
            }
        }
    }

    // Delete a member
    void deleteMember(int prn) {
        if (head == nullptr) {
            cout << "The list is empty.\n";
            return;
        }

        // If the member to delete is the president
        if (head->prn == prn) {
            Node* temp = head;
            head = head->next;
            delete temp;
            if (head == nullptr) // If the list becomes empty
                tail = nullptr;
            cout << "President removed.\n";
            return;
        }

        // If the member to delete is the secretary
        if (tail->prn == prn) {
            Node* temp = head;
            while (temp->next != tail) {
                temp = temp->next;
            }
            delete tail;
            tail = temp;
            tail->next = nullptr;
            cout << "Secretary removed.\n";
            return;
        }

        // Deleting a regular member
        Node* current = head;
        while (current->next != nullptr && current->next->prn != prn) {
            current = current->next;
        }

        if (current->next == nullptr) {
            cout << "Member not found.\n";
        } else {
            Node* temp = current->next;
            current->next = temp->next;
            delete temp;
            cout << "Member removed.\n";
        }
    }

    // Compute the total number of members
    int countMembers() const {
        int count = 0;
        Node* temp = head;
        while (temp != nullptr) {
            count++;
            temp = temp->next;
        }
        return count;
    }

    // Display all members
    void displayMembers() const {
        if (head == nullptr) {
            cout << "The list is empty.\n";
            return;
        }

        Node* temp = head;
        cout << "Club Members:\n";
        while (temp != nullptr) {
            cout << temp->prn << " - " << temp->name << endl;
            temp = temp->next;
        }
    }

    // Concatenate another list to this list
    void concatenate(PinnacleClub& other) {
        if (head == nullptr) { // If the current list is empty
            head = other.head;
            tail = other.tail;
        } else if (other.head != nullptr) { // If the other list is not empty
            tail->next = other.head;
            tail = other.tail;
        }

        // Clear the other list
        other.head = nullptr;
        other.tail = nullptr;
    }

    // Destructor to free memory
    ~PinnacleClub() {
        Node* temp;
        while (head != nullptr) {
            temp = head;
            head = head->next;
            delete temp;
        }
    }
};

// Main function
int main() {
    PinnacleClub divA, divB;

    // Menu-driven program
    int choice, prn;
    string name;

    while (true) {
        cout << "\n--- Pinnacle Club Menu ---\n";
        cout << "1. Add President\n2. Add Secretary\n3. Add Member\n4. Delete Member\n";
        cout << "5. Display Members\n6. Count Members\n7. Concatenate Divisions\n8. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter President's PRN: ";
            cin >> prn;
            cout << "Enter President's Name: ";
            cin.ignore();
            getline(cin, name);
            divA.addMember(prn, name, true, false);
            break;

        case 2:
            cout << "Enter Secretary's PRN: ";
            cin >> prn;
            cout << "Enter Secretary's Name: ";
            cin.ignore();
            getline(cin, name);
            divA.addMember(prn, name, false, true);
            break;

        case 3:
            cout << "Enter Member's PRN: ";
            cin >> prn;
            cout << "Enter Member's Name: ";
            cin.ignore();
            getline(cin, name);
            divA.addMember(prn, name);
            break;

        case 4:
            cout << "Enter PRN of member to delete: ";
            cin >> prn;
            divA.deleteMember(prn);
            break;

        case 5:
            divA.displayMembers();
            break;

        case 6:
            cout << "Total Members: " << divA.countMembers() << endl;
            break;

        case 7:
            cout << "Enter members of Division B (PRN and Name, -1 to stop):\n";
            while (true) {
                cout << "Enter PRN (-1 to stop): ";
                cin >> prn;
                if (prn == -1) break;
                cout << "Enter Name: ";
                cin.ignore();
                getline(cin, name);
                divB.addMember(prn, name);
            }
            divA.concatenate(divB);
            cout << "Divisions concatenated successfully.\n";
            break;

        case 8:
            cout << "Exiting program.\n";
            return 0;

        default:
            cout << "Invalid choice! Please try again.\n";
        }
    }
}
